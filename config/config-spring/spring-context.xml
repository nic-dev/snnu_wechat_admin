<?xml version="1.0" encoding="utf-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd 
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd 
       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd 
       http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.0.xsd"
	default-autowire="byName">

	<description>Spring公共配置</description>

	<bean
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="systemPropertiesModeName" value="SYSTEM_PROPERTIES_MODE_OVERRIDE" />
		<property name="locations">
			<list>
				<value>classpath*:/config-prop.xml</value>
			</list>
		</property>
	</bean>

	<context:component-scan
		base-package="snnu.wechat.commbiz.dao,snnu.wechat.commbiz.service,snnu.wechat.webapp.dao,snnu.wechat.webapp.service,snnu.wechat.portal.admin.dao,snnu.wechat.portal.admin.service,snnu.wechat.system.admin.dao,snnu.wechat.system.admin.service" />


	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close">
		<property name="driverClassName" value="${database.driverName}" />
		<property name="url" value="${database.url}" />
		<property name="username" value="${database.user}" />
		<property name="password" value="${database.password}" />
		<property name="initialSize" value="${database.initialSize}" />
		<property name="maxActive" value="${database.maxActive}" />
		<property name="maxIdle" value="${database.maxIdle}" />
		<property name="minIdle" value="${database.minIdle}" />
		<property name="maxWait" value="${database.maxWait}" />
		<property name="testOnBorrow" value="true" />
		<property name="validationQuery" value="select 1" />
	</bean>

	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="namingStrategy">
			<bean class="org.hibernate.cfg.ImprovedNamingStrategy" />
		</property>
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">
					${hibernate.dialect}
				</prop>
				<prop key="hibernate.show_sql">
					${hibernate.show_sql}
				</prop>
				<prop key="hibernate.format_sql">
					${hibernate.format_sql}
				</prop>
				<prop key="hibernate.cache.provider_class">
					org.hibernate.cache.EhCacheProvider
				</prop>
			</props>
		</property>
		<property name="packagesToScan">
			<list>
				<value>snnu.wechat.commbiz.entity</value>
				<value>snnu.wechat.system.admin.entity</value>
				<value>snnu.wechat.portal.admin.entity</value>
				<value>snnu.wechat.webapp.entity</value>
			</list>
		</property>
	</bean>

	<bean id="transactionManager"
		class="org.springframework.orm.hibernate3.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>


	<tx:annotation-driven transaction-manager="transactionManager"
		proxy-target-class="true" />

	<bean id="xmlMarshaller"
		class="snnu.wechat.framework.util.dataparse.xml.XstreamMarshallerExt">
		<property name="streamDriver">
			<!-- <bean class="snnu.wechat.framework.util.dataparse.xml.StaxExtDriver"></bean> -->
			<bean class="com.thoughtworks.xstream.io.xml.StaxDriver"></bean>
		</property>
		<property name="annotatedClasses">
			<list>

				<value>snnu.wechat.commbiz.model.WechatResponseXml</value>

			</list>
		</property>
	</bean>
	<bean id="xmlUnMarshaller"
		class="snnu.wechat.framework.util.dataparse.xml.XstreamMarshallerExt">
		<property name="streamDriver">
			<!-- <bean class="snnu.wechat.framework.util.dataparse.xml.StaxExtDriver"></bean> -->
			<bean class="com.thoughtworks.xstream.io.xml.StaxDriver"></bean>
		</property>
		<property name="annotatedClasses">
			<list>

				<value>snnu.wechat.commbiz.model.WechatRequestXml</value>

			</list>
		</property>
	</bean>
	<bean id="xmlMarshallerAndUnMarshaller"
		class="snnu.wechat.framework.util.dataparse.xml.XstreamMarshallerExt">
		<property name="streamDriver">
			<bean class="snnu.wechat.framework.util.dataparse.xml.StaxExtDriver"></bean>
			<!--<bean class="com.thoughtworks.xstream.io.xml.StaxDriver"></bean> -->
		</property>
		<property name="annotatedClasses">
			<list>

				<value>snnu.wechat.commbiz.model.WechatHttpXml</value>
				
			</list>
		</property>
	</bean>
	<util:list id="messageConverterList">
		<bean
			class="org.springframework.http.converter.BufferedImageHttpMessageConverter"></bean>
		<bean
			class="org.springframework.http.converter.ByteArrayHttpMessageConverter"></bean>
		<bean class="org.springframework.http.converter.StringHttpMessageConverter">

		</bean>
		<bean
			class="org.springframework.http.converter.xml.XmlAwareFormHttpMessageConverter"></bean>
		<bean
			class="org.springframework.http.converter.xml.MarshallingHttpMessageConverter">
			<property name="supportedMediaTypes">
				<list>
					<value>application/xml</value>
					<value>text/xml</value>
				</list>
			</property>

			<property name="marshaller" ref="xmlMarshallerAndUnMarshaller" />
			<property name="unmarshaller" ref="xmlMarshallerAndUnMarshaller" />
		</bean>
		<bean
			class="org.springframework.http.converter.ByteArrayHttpMessageConverter">
			<property name="supportedMediaTypes">
				<list>
					<value>image/jpeg</value>
					<value>application/octet-stream</value>
				</list>
			</property>
			<!-- <property name="objectMapper"> <bean class="snnu.wechat.framework.util.dataparse.json.ObjectMappingExt"></bean> 
				</property> -->
		</bean>
		<bean
			class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
			<property name="supportedMediaTypes">
				<list>
					<value>application/json</value>
					<value>text/plain</value><!-- 微信某些响应的数据格式为json，header为text/plain -->
				</list>
			</property>
			<property name="objectMapper">
				<bean class="snnu.wechat.framework.util.dataparse.json.ObjectMappingExt"></bean>
			</property>
		</bean>

	</util:list>
	<bean id="httpClientFactory"
		class="org.springframework.http.client.HttpComponentsClientHttpRequestFactory">

	</bean>
	<bean id="restTemplate" class="org.springframework.web.client.RestTemplate">
		<constructor-arg ref="httpClientFactory" />
		<property name="messageConverters" ref="messageConverterList">

		</property>
	</bean>

	<bean id="simulRestTemplate" class="org.springframework.web.client.RestTemplate">
		<constructor-arg ref="httpClientFactory" />
		<property name="messageConverters" ref="messageConverterList">

		</property>
	</bean>


	<bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
		<property name="maxActive" value="${redis.pool.maxActive}" />
		<property name="maxIdle" value="${redis.pool.maxIdle}" />
		<property name="maxWait" value="${redis.pool.maxWait}" />
		<property name="testOnBorrow" value="${redis.pool.testOnBorrow}" />
	</bean>
	<bean id="jedisConnectionFactory"
		class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
		<property name="hostName" value="${redis.ip}" />
		<property name="port" value="${redis.port}" />
		<property name="poolConfig" ref="jedisPoolConfig" />
	</bean>
	<bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate">
		<property name="connectionFactory" ref="jedisConnectionFactory"></property>
		</bean>
	 <bean id="redisService" class="snnu.wechat.framework.service.cache.RedisService" 
		/> 
		
	<import resource="classpath:/config-spring/spring-config-bean.xml" />
	

	<import resource="classpath:/config-spring/spring-config-shiro.xml" />
</beans>